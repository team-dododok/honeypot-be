
name: 🙏 DEV Deploy to Amazon ECS

on:
  push:
    branches: [ "dev" ]
  pull_request:
    branches: [ "dev" ]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}           # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{ secrets.ECS_SERVICE }}                 # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ secrets.ECS_CLUSTER }}                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: task-definition-dev.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: ${{ secrets.CONTAINER_NAME }}           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  ECS_APP: AppECS-honeypot-cluster-honeypot-service
  ECS_DG: DgpECS-honeypot-cluster-honeypot-service
  ECS_APPSPEC: appspec.yml

permissions:
  contents: read

jobs:
  deploy:
    name: 🐿 Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - uses: actions/checkout@v4
    - name: 🐿 Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: 🐿 application.yml 파일을 생성 합니다.
      run: |
        touch ./src/main/resources/application-secret.yml
        echo "${{ secrets.APPLICATION_SECRET }}" > ./src/main/resources/application-secret.yml

    - name: 🐿 task-definition.json 파일을 생성 합니다.
      run: |
        cat <<EOF > ./task-definition-dev.json
        ${{ secrets.ECS_TASK_DEFINITION_DEV }}
        EOF

    - name: 🐿 appspec.yml 파일을 생성 합니다.
      run: |
        touch ./appspec.yml
        echo "${{ secrets.APPSPEC_DEV }}" > ./appspec.yml

    - name: 🐿gradle build를 위한 권한을 부여합니다.
      run: chmod +x gradlew

    - name: 🐿 Docker Buildx를 세팅합니다.
      uses: docker/setup-buildx-action@v2

    - name: 🐿 gradle build 중입니다.
      run: ./gradlew build -x test

    - name: 🐿 AWS 권한을 설정합니다.
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🐿 아마존 ECR에 로그인 합니다.
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: 🐿 이미지를 빌드하고 ECR에 푸시합니다.
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker buildx build --platform=linux/amd64,linux/arm64 -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG . --push
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: 🐿 새로운 이미지에 대한 ECR 테스크 정의를 진행합니다.
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}

    - name: 🐿 ECS에 새로 배포된 이미지를 배포합니다.
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
        codedeploy-appspec: ${{ env.ECS_APPSPEC }}
        codedeploy-application: ${{ env.ECS_APP }}
        codedeploy-deployment-group: ${{ env.ECS_DG }}
